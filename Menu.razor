@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using Sandbox.Network;
@using Sandbox.Network;
@inherits PanelComponent

<root>
	<img class="background" src="assets/background.vtex">
	<div class="leaderboard">
	<div class="title">Leaderboard</div>
	<div class="changeleaderboard">
	<div class="add" onclick=@AddToLeaderboard>navigate_next</div>
	<div class="text">@Leaderboards[CurrentLeaderboardIndex].DisplayName</div>
	<div class="subtract" onclick=@SubtractFromLeaderboard>chevron_left</div>
	</div>
	@foreach (var entry in Leaderboards[CurrentLeaderboardIndex].Entries)
	{
		<div class="entry">
		<div class="name">@entry.Rank: @entry.DisplayName
		<image texture=@AvatarTexture(entry)/></div>
		<div class="score">@entry.FormattedValue</div>
		</div>
		
	}
	</div>

	<div class="playbutton" onclick=@PlayGame>Create a lobby</div>
	<div class="lobbylist">
	<div class="title">Lobbies</div>
	@if (IsRefreshing)
	{
		<div class="updatetext">Refreshing...</div>
	}
	else if (List.Count == 0)
	{
		<div class="updatetext">No lobbies found... Create One!</div>
	}
	else
	{
		@foreach(var lobby in List)
		{
			<div class="lobby">
			<div class="name">@lobby.Members / @lobby.MaxMembers</div>
			<div class="players">@lobby.Name</div>
			</div>
		}
	}
	</div>
	<div class="options">
		<div class="button" onclick=@ChangeSkins>Change Playermodel</div>
	</div>
</root>

@code
{
	[Property] public Manager Manager { get; set; }
	[Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";
	[Property, Category("Scenes")] public SceneFile GameScene { get; set; }
	[Property, Category("Scenes")] public SceneFile LockerScene { get; set; }
	public Sandbox.Services.Leaderboards.Board[] Leaderboards = new Sandbox.Services.Leaderboards.Board[3];
	private bool IsRefreshing { get; set; }
	private List<LobbyInformation> List {get; set;} = new();
	public int CurrentLeaderboardIndex = 0;
	protected override void OnUpdate()
	{
		CurrentLeaderboardIndex.Clamp(0, Leaderboards.Length - 1);
		Leaderboards[0] = Manager.FastestLap;
		Leaderboards[1] = Manager.MostLaps;
		Leaderboards[2] = Manager.Deaths;
	}
	protected override void OnStart()
	{
		_ = RefreshLobbyList();
	}
	 string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }


	string AvatarTexture(Sandbox.Services.Leaderboards.Entry entry)
    {
        return $"avatar:{entry.SteamId}";
    }
	private async Task RefreshLobbyList()
	{
		while ( true )
		{
			IsRefreshing = true;
			StateHasChanged();

			List = await Networking.QueryLobbies();

			IsRefreshing = false;
			StateHasChanged();

			await Task.DelayRealtimeSeconds( 5f );
		}
	}
	void AddToLeaderboard()
	{
		if (CurrentLeaderboardIndex != Leaderboards.Length - 1)
		{
		CurrentLeaderboardIndex++;
		}
		else
		{
			CurrentLeaderboardIndex = 0;
		}
	}
	void SubtractFromLeaderboard()
	{
		if (CurrentLeaderboardIndex != 0)
		{
		CurrentLeaderboardIndex--;
		}
		else
		{
			CurrentLeaderboardIndex = Leaderboards.Length - 1;
		}
	}

	void ChangeSkins()
	{
		Game.ActiveScene.Load(LockerScene);
	}

	void PlayGame()
	{
		Game.ActiveScene.Load(GameScene);
	}
	
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
